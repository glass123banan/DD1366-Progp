/* Kodskelett f√∂r labb S3 i DD1361 Programmeringsparadigm
 *
 * F√∂rfattare: Per Austrin
 */

// Imports
import java.util.List;
import java.util.Map;
import java.util.Queue;
import java.util.ArrayList;
//import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;

public class DFA {
	// fields
	int dfaStateCount; // amount of states in total 
	int dfaStartState; // q0: number for starting state

	// DFA = (Q, ‚àë, ùõø, q0, F)
	List<Integer> states = new ArrayList<Integer>(); // Q: store all states
	List<Integer> acceptingStates = new ArrayList<Integer>(); // F: store accepting states
	Map<Integer, Map<Character, Integer>> transitions = new HashMap<>(); // Store all transitions (To, (Char, From))
	
	// class for tuples with stringbuiler and state (sb,state)
	public static class sbStateTuple {
		int state;
		StringBuilder sb;
	
		sbStateTuple(int state, StringBuilder sb) {
			this.state = state;
			this.sb = sb;
		}
	}

	// class for tuples with state and length
	public static class stateLengthTuple {
		int state;
		int length;

		stateLengthTuple(int state, int length){
			this.state = state;
			this.length = length;
		}
	}

	/* Konstruktor som skapar en automat med stateCount antal tillst√•nd, d√§r tillst√•nd 
	nummer startState √§r starttillst√•nd. Tillst√•nden numreras fr√•n 0 till stateCount ‚àí 1. */
	public DFA(int stateCount, int startState) {
		dfaStateCount = stateCount;
		dfaStartState = startState;	

		// Skapar en lista med nummer f√∂r alla states
		for(int i = 0; i < stateCount; i++) {
			states.add(i); 
		}
	}

	/* Anger att tillst√•ndet state √§r ett accepterande tillst√•nd. */
	public void setAccepting(int state) {
		acceptingStates.add(state);
	}

	/* Anger att det finns en √∂verg√•ng fr√•n from till to med tecknet sym. */
	public void addTransition(int from, int to, char c) {
		// skapar endast ny inre map om det inte finns en befintlig
		transitions.computeIfAbsent(from, k -> new HashMap<>()).put(c, to); 
	}
	
	/* Metod som returnerar upp till maxCount olika str√§ngar som automaten accepterar.
	 Om automaten accepterar f√§rre (eller lika med) maxCount str√§ngar ska alla str√§ngar 
	 som automaten accepterar returneras. Om automaten accepterar fler str√§ngar ska exakt 
	 maxCount olika str√§ngar returneras. I det senare fallet f√•r metoden i princip returnera 
	 vilka accepterande str√§ngar som helst (det beh√∂ver t.ex. inte vara de f√∂rsta i alfabetisk 
	 ordning, eller n√•got s√•dant), men av tekniska sk√§l f√•r de returnerade str√§ngarna inte 
	 vara allt f√∂r l√•nga (se ‚ÄúBegr√§nsningar‚Äù nedan). Listan som returneras beh√∂ver inte vara 
	 sorterad, str√§ngarna kan returneras i godtycklig ordning. */
	// public List<String> getAcceptingStrings(int maxCount) {
	// 	Queue<sbStateTuple> queue = new LinkedList<>(); // create queue
	// 	List<String> acceptedStrings = new ArrayList<>(); // store all possible strings from dfa here
	// 	HashSet<stateLengthTuple> visited = new HashSet<>(); // store visited 
		
	// 	StringBuilder sb = new StringBuilder(1000);
	// 	queue.offer(new sbStateTuple(dfaStartState, new StringBuilder(sb))); // add startstate to queue
	// 	visited.add(new stateLengthTuple(dfaStartState, 0)); // add to visited
		
	// 	// check p√• k√∂ och check p√• antalet str√§ngar
	// 	while(!queue.isEmpty() && acceptedStrings.size() < maxCount) {
	// 		sbStateTuple current = queue.poll(); // retrieve the sbStateTuple from the current 
	// 		int currentState = current.state; // retrieve current state
	// 		StringBuilder currentSb = current.sb; // retrieve current string
	// 		int currentLength = currentSb.length(); // current length

	// 		// add current string to accepted strings IF current state is an accepting state
	// 		if (acceptingStates.contains(currentState)) {
	// 			acceptedStrings.add(currentSb.toString());
	// 		}

	// 		if (transitions.containsKey(currentState) && currentLength < 5000) {
	// 			StringBuilder tempSb = new StringBuilder(currentSb);
	// 			for (Map.Entry<Character,Integer> entry : transitions.get(currentState).entrySet()) {
	// 				char symbol = entry.getKey();
	// 				int nextState = entry.getValue();
	// 				int newLength = currentLength+1;
					
	// 				stateLengthTuple checkVisited = new stateLengthTuple(nextState, newLength);
	// 				if(visited.add(checkVisited)) {
	// 					tempSb.append(symbol);
	// 					StringBuilder newSb = new StringBuilder(newLength+10);
	// 					newSb.append(tempSb);
	// 					queue.offer(new sbStateTuple(nextState, newSb));
	// 					tempSb.setLength(currentLength);
	// 				}
	// 			}
	// 		}
	// 	}
	// 	return acceptedStrings;
	// }

	public List<String> getAcceptingStrings(int maxCount) {
		// HashSet f√∂r att lagra unika accepterade str√§ngar
		HashSet<String> accepted = new HashSet<>();
		// K√∂ f√∂r BFS: lagrar (state, StringBuilder)
		Queue<Entry> queue = new LinkedList<>();
		queue.add(new Entry(dfaStartState, new StringBuilder()));
		
		while (!queue.isEmpty() && accepted.size() < maxCount) {
			Entry current = queue.poll();
			int state = current.state;
			StringBuilder sb = current.sb;
			int length = sb.length();
			
			// Om tillst√•ndet √§r accepterande, l√§gg till str√§ngen
			if (acceptingStates.contains(state)) {
				accepted.add(sb.toString());
				if (accepted.size() >= maxCount) {
					break; // Avsluta om vi har tillr√§ckligt
				}
			}
			
			// Utforska √∂verg√•ngar om l√§ngden √§r mindre √§n 5000
			if (length < 5000 && transitions.containsKey(state)) {
				for (Map.Entry<Character, Integer> transition : transitions.get(state).entrySet()) {
					char c = transition.getKey();
					int nextState = transition.getValue();
					
					// Skapa ny StringBuilder f√∂r n√§sta tillst√•nd
					StringBuilder newSb = new StringBuilder(sb);
					newSb.append(c);
					queue.add(new Entry(nextState, newSb));
				}
			}
		}
		
		return new ArrayList<>(accepted); // Returnera listan med accepterade str√§ngar
	}
	
	// Hj√§lpklass f√∂r k√∂-element
	private static class Entry {
		int state;
		StringBuilder sb;
		Entry(int state, StringBuilder sb) {
			this.state = state;
			this.sb = sb;
		}
	}
}